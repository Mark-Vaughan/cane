function [output, problemStruct] = monteCarlo(caseName, input, inputFunction, outputFunction)
    % [output, problemStruct] = monteCarlo(caseName, input, inputFunction, outputFunction, nSamples)
    % caseName          : name of the .dat file to be parsed
    % input             : values of the input variable generated by the distributionFunction
    % inputFunction     : function that modifies the ParameterStructure based on the input value
    % outputFunction    : function that computes the quantity-of-interest using the FE results
    % nSamples          : number of samples (redundant, equals the length of input)
    %
    % Input and output function signatures:
    %                   inputFunction(ParameterStructure,inputValue)
    %                   outputFunction(ParameterStructure,up,FComplete)
    
    
    %% INIT
    nSamples        = length(input);
    problemStruct   = init(caseName);
    % Prealloc
    output          = cell(nSamples, 1);
    paramStruct = repmat( ParameterStructure(), 1, nSamples);
    for k=1:nSamples
        paramStruct(k) = ParameterStructure(problemStruct);
    end
       
    %% RUN
    % Set up parallel processing
    if max(size(gcp)) == 0                  % parallel pool needed
        parpool                             % create the parallel pool
    end
    
    % Create function handle for field selection - this is needed to avoid
    % calling nested functions directly (which is forbidden in parfor loops)
    % See the MATLAB documentation on parfor loop limitations with nested
    % functions for more information
    fieldSelect = @fieldSelector;
    
    % Set up progress bar
    fprintf(['\n' repmat('.',1,nSamples) '\n\n']);
    % Run main loop
    tic
    parfor k=1:nSamples
        % Get current input
        inputFunction( paramStruct(k), input(k) );
        % Run solver
        [up,FComplete,hasConverged,minElSize] =                                         ...
            solve_FEMVMSStabSteadyStateNSE2D(                                           ...
            feval(fieldSelect,paramStruct(k),problemStruct,'fldMsh'),                   ...
            feval(fieldSelect,paramStruct(k),problemStruct,'homDBC'),                   ...
            feval(fieldSelect,paramStruct(k),problemStruct,'inhomDBC'),                 ...
            feval(fieldSelect,paramStruct(k),problemStruct,'valuesInhomDBC'),           ...
            feval(fieldSelect,paramStruct(k),problemStruct,'nodesALE'),                 ...
            feval(fieldSelect,paramStruct(k),problemStruct,'parameters'),               ...
            feval(fieldSelect,paramStruct(k),problemStruct,'computeBodyForces'),        ...
            feval(fieldSelect,paramStruct(k),problemStruct,'analysis'),                 ...
            feval(fieldSelect,paramStruct(k),problemStruct,'computeInitialConditions'), ...
            feval(fieldSelect,paramStruct(k),problemStruct,'VTKResultFile'),            ...
            feval(fieldSelect,paramStruct(k),problemStruct,'solve_LinearSystem'),       ...
            feval(fieldSelect,paramStruct(k),problemStruct,'propFldDynamics'),          ...
            feval(fieldSelect,paramStruct(k),problemStruct,'propNLinearAnalysis'),      ...
            feval(fieldSelect,paramStruct(k),problemStruct,'gaussInt'),                 ...
            feval(fieldSelect,paramStruct(k),problemStruct,'caseName'),                 ...
            'outputDisabled'                                                            ...
        );
    
        % Write output
        output{k} = outputFunction(paramStruct(k), up, FComplete);
        
        % Update progress bar
        fprintf('\b|\n');
        
    end
    disp(['Elapsed time: ', num2str(toc)])
    
    %% FUNCTION DEFINITIONS
    function paramField = fieldSelector(parameterStructure,problemStructure,fieldName)
        % If parameterStructure contains 'fieldName', return it. Otherwise,
        % return 'fieldName' from the problemStructure
        % This function ensures that you don't have to modify the arguments
        % passed to the FE solver when you add/remove fields to/from the 
        % ParameterStructure class
        if isprop(parameterStructure,fieldName)
            paramField = parameterStructure.(fieldName);
        else
            paramField = problemStructure.(fieldName);
        end
    end
    %% END ----------------------------------------------------------------
end